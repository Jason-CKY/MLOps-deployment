version: "3"
services:
  minio:
    image: minio/minio
    container_name: minio
    expose:
      - "9000"
    ports:
      # MinIO Console is available at http://localhost:9001
      - "9001:9001"
    networks:
      - mlflow
    volumes:
      - mlflow-artifact:/data
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 1s
      timeout: 10s
      retries: 5
    # Note there is no bucket by default
    command: server /data --console-address ":9001"

  minio-create-bucket:
    image: minio/mc
    container_name: mc
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    networks:
      - mlflow
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD &&
      if ! mc ls minio | grep --quiet bucket; then
        mc mb minio/bucket
      else
        echo 'bucket already exists'
      fi
      "

  postgres:
    image: postgres
    container_name: mlflow-postgres
    restart: always
    networks:
      - mlflow
    volumes:
      - mlflow-db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  tracking-server:
    build:
      context: .
      dockerfile: deploy/mlflow/Dockerfile
    container_name: mlflow
    depends_on:
      postgres: 
        condition: service_healthy
      minio-create-bucket:
        condition: service_completed_successfully
    networks:
      - mlflow
      - deployml_network
    expose:
      - "5000"
    ports:
      # MLflow UI is available at http://localhost:5000
      - "5000:5000"
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: "${MINIO_ROOT_USER}"
      AWS_SECRET_ACCESS_KEY: "${MINIO_ROOT_PASSWORD}"
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      --artifacts-destination s3://bucket
      --serve-artifacts
      --gunicorn-opts "--log-level debug"

  resnet-client:
    image: bitnami/pytorch:latest
    container_name: pytorch
    depends_on:
      - tracking-server
    networks:
      - deployml_network
    environment:
      TORCH_HOME: /app
      MLFLOW_TRACKING_URI: http://tracking-server:5000
    volumes:
      - ./mlflow_upload.py:/app/mlflow_upload.py
    command: >
      bash -c "
      pip install mlflow &&
      python mlflow_upload.py
      "
      
networks:
  mlflow:
  deployml_network:

volumes:
  mlflow-artifact:
  mlflow-db: